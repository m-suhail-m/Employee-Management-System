// <auto-generated />
using System;
using Employee_Management_System_API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Employee_Management_System_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Employee_Management_System_API.Models.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentDescription = "The department that deals with information and technology",
                            DepartmentName = "IT"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentDescription = "The department that deals with employees and payroll",
                            DepartmentName = "HR"
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentDescription = "The department that deals with finances",
                            DepartmentName = "Accounting"
                        });
                });

            modelBuilder.Entity("Employee_Management_System_API.Models.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int?>("ReportingLineManagerId")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ReportingLineManagerId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            BirthDate = new DateTime(1982, 9, 18, 19, 29, 0, 752, DateTimeKind.Local).AddTicks(7562),
                            EmployeeNumber = "0001198801",
                            Name = "Bob",
                            PositionId = 1,
                            Salary = 50000.0,
                            Surname = "Gates"
                        },
                        new
                        {
                            EmployeeId = 2,
                            BirthDate = new DateTime(1992, 9, 18, 19, 29, 0, 753, DateTimeKind.Local).AddTicks(5019),
                            EmployeeNumber = "0002199801",
                            Name = "Harriet",
                            PositionId = 2,
                            Salary = 20000.0,
                            Surname = "Crane"
                        },
                        new
                        {
                            EmployeeId = 3,
                            BirthDate = new DateTime(1994, 9, 18, 19, 29, 0, 753, DateTimeKind.Local).AddTicks(5052),
                            EmployeeNumber = "0003200001",
                            Name = "Jonathan",
                            PositionId = 2,
                            Salary = 20000.0,
                            Surname = "Nate"
                        },
                        new
                        {
                            EmployeeId = 4,
                            BirthDate = new DateTime(1994, 9, 18, 19, 29, 0, 753, DateTimeKind.Local).AddTicks(5066),
                            DepartmentId = 1,
                            EmployeeNumber = "0004200005",
                            Name = "Bill",
                            PositionId = 3,
                            Salary = 15000.0,
                            Surname = "Shane"
                        },
                        new
                        {
                            EmployeeId = 5,
                            BirthDate = new DateTime(1994, 9, 18, 19, 29, 0, 753, DateTimeKind.Local).AddTicks(5271),
                            DepartmentId = 2,
                            EmployeeNumber = "0005200005",
                            Name = "Charel",
                            PositionId = 3,
                            Salary = 15000.0,
                            Surname = "Heinz"
                        },
                        new
                        {
                            EmployeeId = 6,
                            BirthDate = new DateTime(1994, 9, 18, 19, 29, 0, 753, DateTimeKind.Local).AddTicks(5288),
                            DepartmentId = 3,
                            EmployeeNumber = "0006200005",
                            Name = "Calvin",
                            PositionId = 3,
                            Salary = 15000.0,
                            Surname = "Kane"
                        },
                        new
                        {
                            EmployeeId = 7,
                            BirthDate = new DateTime(1994, 9, 18, 19, 29, 0, 753, DateTimeKind.Local).AddTicks(5299),
                            DepartmentId = 1,
                            EmployeeNumber = "0007200002",
                            Name = "Matt",
                            PositionId = 4,
                            Salary = 10000.0,
                            Surname = "Flake"
                        },
                        new
                        {
                            EmployeeId = 8,
                            BirthDate = new DateTime(1994, 9, 18, 19, 29, 0, 753, DateTimeKind.Local).AddTicks(5311),
                            DepartmentId = 2,
                            EmployeeNumber = "0008200002",
                            Name = "Blake",
                            PositionId = 4,
                            Salary = 10000.0,
                            Surname = "Flake"
                        },
                        new
                        {
                            EmployeeId = 9,
                            BirthDate = new DateTime(1994, 9, 18, 19, 29, 0, 753, DateTimeKind.Local).AddTicks(5322),
                            DepartmentId = 3,
                            EmployeeNumber = "0009200003",
                            Name = "Candice",
                            PositionId = 4,
                            Salary = 10000.0,
                            Surname = "Catnipp"
                        },
                        new
                        {
                            EmployeeId = 10,
                            BirthDate = new DateTime(1994, 9, 18, 19, 29, 0, 753, DateTimeKind.Local).AddTicks(5334),
                            DepartmentId = 1,
                            EmployeeNumber = "0010200003",
                            Name = "Ben",
                            PositionId = 5,
                            ReportingLineManagerId = 7,
                            Salary = 8000.0,
                            Surname = "Brown"
                        },
                        new
                        {
                            EmployeeId = 11,
                            BirthDate = new DateTime(1994, 9, 18, 19, 29, 0, 753, DateTimeKind.Local).AddTicks(5514),
                            DepartmentId = 1,
                            EmployeeNumber = "0011200003",
                            Name = "Percival",
                            PositionId = 5,
                            ReportingLineManagerId = 7,
                            Salary = 8000.0,
                            Surname = "Purple"
                        },
                        new
                        {
                            EmployeeId = 12,
                            BirthDate = new DateTime(1994, 9, 18, 19, 29, 0, 753, DateTimeKind.Local).AddTicks(5527),
                            DepartmentId = 2,
                            EmployeeNumber = "0012200003",
                            Name = "Yvonne",
                            PositionId = 6,
                            ReportingLineManagerId = 8,
                            Salary = 8000.0,
                            Surname = "Yellow"
                        },
                        new
                        {
                            EmployeeId = 13,
                            BirthDate = new DateTime(1994, 9, 18, 19, 29, 0, 753, DateTimeKind.Local).AddTicks(5538),
                            DepartmentId = 2,
                            EmployeeNumber = "0013200003",
                            Name = "Greg",
                            PositionId = 6,
                            ReportingLineManagerId = 8,
                            Salary = 8000.0,
                            Surname = "Green"
                        },
                        new
                        {
                            EmployeeId = 14,
                            BirthDate = new DateTime(1994, 9, 18, 19, 29, 0, 753, DateTimeKind.Local).AddTicks(5549),
                            DepartmentId = 3,
                            EmployeeNumber = "0014200003",
                            Name = "Veronica",
                            PositionId = 7,
                            ReportingLineManagerId = 9,
                            Salary = 8000.0,
                            Surname = "Vermillion"
                        },
                        new
                        {
                            EmployeeId = 15,
                            BirthDate = new DateTime(1994, 9, 18, 19, 29, 0, 753, DateTimeKind.Local).AddTicks(5591),
                            DepartmentId = 3,
                            EmployeeNumber = "0015200003",
                            Name = "Philip",
                            PositionId = 7,
                            ReportingLineManagerId = 9,
                            Salary = 8000.0,
                            Surname = "Fuschia"
                        });
                });

            modelBuilder.Entity("Employee_Management_System_API.Models.Entities.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasDepartment")
                        .HasColumnType("bit");

                    b.Property<bool>("HasReportingLineManager")
                        .HasColumnType("bit");

                    b.Property<string>("PositionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = 1,
                            HasDepartment = false,
                            HasReportingLineManager = false,
                            PositionDescription = "The person responsible for managing the entire organisation",
                            PositionName = "CEO"
                        },
                        new
                        {
                            PositionId = 2,
                            HasDepartment = false,
                            HasReportingLineManager = false,
                            PositionDescription = "The person responsible for the day to day operation of the organisation",
                            PositionName = "COO"
                        },
                        new
                        {
                            PositionId = 3,
                            HasDepartment = true,
                            HasReportingLineManager = false,
                            PositionDescription = "The person in charge of a particular department",
                            PositionName = "Head of Department"
                        },
                        new
                        {
                            PositionId = 4,
                            HasDepartment = true,
                            HasReportingLineManager = false,
                            PositionDescription = "The person in charge of a particular group of employees within a department",
                            PositionName = "Reporting Line Manager"
                        },
                        new
                        {
                            PositionId = 5,
                            HasDepartment = true,
                            HasReportingLineManager = true,
                            PositionDescription = "A person who develops frontend applications",
                            PositionName = "Frontend Developer"
                        },
                        new
                        {
                            PositionId = 6,
                            HasDepartment = true,
                            HasReportingLineManager = true,
                            PositionDescription = "A person who deals with employees",
                            PositionName = "HR Officer"
                        },
                        new
                        {
                            PositionId = 7,
                            HasDepartment = true,
                            HasReportingLineManager = true,
                            PositionDescription = "A person who crunches numbers",
                            PositionName = "Accountant"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Employee_Management_System_API.Models.Entities.Employee", b =>
                {
                    b.HasOne("Employee_Management_System_API.Models.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Employee_Management_System_API.Models.Entities.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Employee_Management_System_API.Models.Entities.Employee", "ReportingLineManager")
                        .WithMany()
                        .HasForeignKey("ReportingLineManagerId");

                    b.Navigation("Department");

                    b.Navigation("Position");

                    b.Navigation("ReportingLineManager");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Employee_Management_System_API.Models.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Employee_Management_System_API.Models.Entities.Position", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
